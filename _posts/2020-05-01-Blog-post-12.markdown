---
layout: post
title:  "Blog 12: CI/CD, meet Jenkins"
date:   2020-05-01 18:00:18 -0000
categories: jekyll update
---

<h3>CI/CD: Jenkins</h3>

Continuous integration (CI) and Continuous delivery (CD) are conjunction of operating principles and practices in the area of application development, and particularly to deliver changes of program code more reliably and frequently. CI/CD philosophy allows to increase quality of code by automating deployment steps.

Continuous integration assumes that development team will perform small changes in code, then check changes in to a version control repository. CI establishing automated way for building, packaging, and testing applications, with high degree of consistency. CI also allows to commit changes more often (high frequency), which improves collaboration and quality of the software.

Continuous development follows continuous integration, and automates delivery of applications to specified environment. All this allows teams to perform simultaneously in multiple environments, such as development, testing, and production.

CI/CD software application holds specific parameters of environment, then upon receiving new changes in programming code of application, CI/CD server performs continuous testing. Upon completion of testing phase, CI/CD server performs necessary service calls to remote servers and databases, to deploy application and trigger necessary procedures and restarts.

Jenkins is one of the software applications that allows to implement continuous integration and continuous delivery principles in the process of building, testing and deploying software. Jenkins is a server based application which runs on servlet containers, for instance Apache Tomcat.

Main features:

  - extensible automation servers = can be used as solely CI server, or CD hub. Can be extended by using plugins
  - easy installation, easy configuration - ready to run after installation, supports Windows, Mac OS X, and Unix like OS. Provides embedded error checker, and build in help.
  - distributed - Jenkins able to distribute builds, tests, and deployments across multiple platforms and multiple machines

<h2>Installing Jenkins on Mac OS, Linux (via Docker platform)</h2>

Create a bridge network in Docker:

    docker network create jenkins

Create volumes to share the Docker client TLS certificates needed to connect to the Docker daemon and persist the Jenkins data:

    docker volume create jenkins-docker-certs
    docker volume create jenkins-data

To execute Docker commands inside Jenkins nodes, download and run the docker:dind Docker image:

    docker container run \
      --name jenkins-docker \
      --rm \
      --detach \
      --privileged \
      --network jenkins \
      --network-alias docker \
      --env DOCKER_TLS_CERTDIR=/certs \
      --volume jenkins-docker-certs:/certs/client \
      --volume jenkins-data:/var/jenkins_home \
      --publish 2376:2376 \
      docker:dind

Download the jenkinsci/blueocean image and run it as a container in Docker:

    docker container run \
      --name jenkins-blueocean \
      --rm \
      --detach \
      --network jenkins \
      --env DOCKER_HOST=tcp://docker:2376 \
      --env DOCKER_CERT_PATH=/certs/client \
      --env DOCKER_TLS_VERIFY=1 \
      --publish 8080:8080 \
      --publish 50000:50000 \
      --volume jenkins-data:/var/jenkins_home \
      --volume jenkins-docker-certs:/certs/client:ro \
      jenkinsci/blueocean

Next step, to proceed with post installation wizard: https://www.jenkins.io/doc/book/installing/#setup-wizard


[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/
